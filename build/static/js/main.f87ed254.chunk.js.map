{"version":3,"sources":["static/twitter_rounded_blue.svg","logo.svg","config.js","components/FriendsCard.js","components/CommonFriends.js","services/apiUtil.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","FriendsCard","Paper","Avatar","CommonFriends","Grid","container","direction","require","twitter","apiUrl","token","userInitialState","avatar","twitterAvatar","id","disabled","screen_name","error","error_msg","friends","buttonInitialState","label","App","useState","buttonState","setButtonState","user1","setUser1","user2","setUser2","validateUserLength","length","useEffect","className","style","spacing","item","marginTop","justify","alignItems","alignContent","md","Typography","variant","component","color","lg","xs","sm","alt","src","height","width","marginRight","TextField","required","size","value","onChange","event","target","helperText","Button","backgroundColor","onClick","Axios","get","then","response","console","log","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f87ed254.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter_rounded_blue.c2f1acf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var config = {}\r\n\r\nconfig.twitter = {\r\n    'apiUrl': 'https://api.twitter.com/1.1/',\r\n    'key': 'UZAMY9RYrVWOAbRDzjMecTvYP',\r\n    'token': 'AAAAAAAAAAAAAAAAAAAAAEJuGAEAAAAAWg%2FD2xxY0C5LB7gBzCF0bHnn4gA%3DjieJ6vLSe2EgA3YIrhlaNvfHtCy7gr44rTa9wFK1MGhAbwdaz5'\r\n}\r\n\r\nmodule.exports = config;\r\n","import React from 'react';\r\nimport { Avatar, Paper, Typography, Grid } from '@material-ui/core';\r\n\r\nfunction FriendsCard() {\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Avatar>Hello</Avatar>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsCard;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport FriendsCard from './FriendsCard'\r\n\r\nfunction CommonFriends() {\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <FriendsCard></FriendsCard>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default CommonFriends;\r\n","var axios = require('axios')\r\nvar config = require('../config')\r\nvar qs = require('qs')\r\n\r\nconst baseUrl = config.twitter.apiUrl;\r\nconst token = config.twitter.token;\r\n\r\nexport const getCall = (url, params) => {\r\n    var target = baseUrl + url;\r\n    return axios.get(target, {\r\n        params: {...params},\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        paramsSerializer: function (params) {\r\n            return qs.stringify(params, {arrayFormat: 'brackets'})\r\n        }\r\n    });\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport twitterAvatar from './static/twitter_rounded_blue.svg'\nimport './App.css';\nimport { Avatar, Paper, Typography, Grid, TextField, Button } from '@material-ui/core';\nimport FriendsCard from './components/FriendsCard'\nimport CommonFriends from './components/CommonFriends';\nimport { findUsers } from './services/userCalls'\nimport { getCall } from './services/apiUtil'\nimport Axios from 'axios'\n\nconst userInitialState = {\n  avatar: twitterAvatar,\n  id: '',\n  disabled: false,\n  screen_name: '',\n  error: false,\n  error_msg: '',\n  friends: []\n}\n\nconst buttonInitialState = {\n  disabled: true,\n  label: 'Not ready'\n}\n\nfunction App() {\n  const [buttonState, setButtonState] = useState(buttonInitialState)\n  const [user1, setUser1] = useState(userInitialState);\n  const [user2, setUser2] = useState(userInitialState);\n\n  const validateUserLength = () => {\n    if(user1.screen_name.length > 0 && user2.screen_name.length > 0){\n      setButtonState({\n        disabled: false,\n        label: 'Let\\'s Go!!'\n      });\n      return true;\n    }else{\n      setButtonState({\n        disabled: true,\n        label: 'Not ready'\n      });\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    // check if the both usernames are given to ready the button\n    validateUserLength();\n  },\n  [user1.screen_name, user2.screen_name])\n\n  const handleUser1Change = (event) => {\n    setUser1({...user1, screen_name: event.target.value});\n  }\n\n  const handleUser2Change = (event) => {\n    setUser2({...user2, screen_name: event.target.value});\n  }\n\n  const letsGO = () => {\n    if(validateUserLength()){\n      setUser1({...user1, disabled: true});\n      setUser2({...user2, disabled: true});\n      // findUsers(user1.screen_name, user2.screen_name)\n      Axios.get('/url').then(function(response){\n        console.log(response)\n      }).catch(function(err){\n        console.error(err)\n      })\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{}}>\n      {/* first container holding first part */}\n      <Grid container direction='column' spacing={0}>\n        \n        {/* first row contains title and subtitle */}\n        <Grid item style={{marginTop: '16px'}}>\n          <Grid \n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            alignContent=\"center\"\n          >\n            <Grid item md={12} >\n              <Typography variant=\"h3\" component=\"h2\" style={{color: 'rgb(29, 161, 242)'}}>\n                Mi Amigos - Su Amigos\n              </Typography>\n              <Typography variant=\"subtitle1\" component=\"span\">\n                Type in you and your friend's twitter handles to find how well connected you are :)\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        \n        {/* Second row contains two inputs */}\n        <Grid item style={{marginTop: '16px'}}>\n          <Grid \n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignContent=\"center\"\n          >\n            <Grid item lg={2} xs={10} sm={5} >\n              <Grid container direction=\"row\" justify=\"center\" alignContent=\"center\">\n                <Grid item>\n                  <Avatar alt={user1.screen_name} variant=\"rounded\" src={user1.avatar} \n                    style={{height: \"54px\", width: \"54px\", marginRight: \"5px\"}}/>\n                </Grid>\n                <Grid item>\n                  <TextField required size=\"medium\" id=\"user1\" value={user1.screen_name} error={user1.error}\n                  onChange={handleUser1Change} disabled={user1.disabled} helperText={user1.error_msg} label=\"@handle\" \n                  variant=\"outlined\"></TextField>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item lg={2} xs={10} sm={5}>\n              <Grid container direction=\"row\" justify=\"center\" alignContent=\"center\">\n                <Grid item>\n                  <Avatar alt={user2.screen_name} variant=\"rounded\" src={user2.avatar} \n                    style={{height: \"54px\", width: \"54px\", marginRight: \"5px\"}}/>\n                </Grid>\n                <Grid item>\n                  <TextField required size=\"medium\" id=\"user2\" value={user2.screen_name} error={user2.error}\n                  onChange={handleUser2Change} disabled={user2.disabled} helperText={user1.error_msg} label=\"@handle\" \n                  variant=\"outlined\"></TextField>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        {/* third row containing button */}\n        <Grid item style={{marginTop: '16px'}}>\n          <Grid container direction=\"row\" justify=\"center\"\n            alignItems=\"center\" alignContent=\"center\" spacing={0}>\n            <Button size=\"large\" variant=\"contained\" disabled={buttonState.disabled} \n              style={{backgroundColor: \"rgb(29, 161, 242)\", color: \"white\"}} \n              onClick={letsGO}>\n              {buttonState.label}\n            </Button>\n          </Grid>\n        </Grid>\n\n        {/* fourth row containing friends */}\n        <Grid item style={{marginTop: '16px'}}>\n          <Grid \n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            alignContent=\"center\"\n            spacing={0}\n          >\n            <Grid item lg={8} sm={10}>\n              <CommonFriends></CommonFriends>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}